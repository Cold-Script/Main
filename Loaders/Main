if game:GetService("ReplicatedStorage").GameData.Floor.Value == "Fools" and game:GetService("ReplicatedStorage").EntityInfo.Name == "EntityInfo" then
game:GetService("ReplicatedStorage").EntityInfo.Name = "RemotesFolder"
end
local RemotesFolder = game:GetService("ReplicatedStorage").RemotesFolder
local Repository = "https://raw.githubusercontent.com/Cold-Script/LinoriaLib/refs/heads/patch-3/"
local Library = loadstring(game:HttpGet(Repository .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(Repository .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(Repository .. "addons/SaveManager.lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Cold-Script/Warning/refs/heads/main/Warning.lua"))()
Notification:Notify("Loading...")
local LibraryESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/Cold-Script/ESPBETA/refs/heads/main/Esp.lua"))()
wait(5)
local Window = Library:CreateWindow({
    Title = "• WinterClaws | " .. game.Players.LocalPlayer.Name .. " •",
    Center = true,
    AutoShow = true,
    Resizable = true,
    ShowCustomCursor = true,
    NotifySide = "Right",
    TabPadding = 2,
    MenuFadeTime = 0
})
wait()
local Tabs = {
  Main = Window:AddTab("Main"),
  Players = Window:AddTab("Players"),
  Exploits = Window:AddTab("Exploits"),
  Visual = Window:AddTab("Visual"),
  Configs = Window:AddTab("Configs")
}
wait()
local MainI = Tabs.Main:AddLeftTabbox()
local Misc = MainI:AddTab("-Misc-")
Misc:AddDropdown("MyDropdown",{
	Values = {"Lobby","Leave","Revive"},
	Default = "", 
	Multi = false,
	Text = 'Select On Death',
	Callback = function(v)
_G.SelectMisc = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledOnDeath then
if game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectMisc == "Lobby" then
RemotesFolder.Lobby:FireServer()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectMisc == "Leave" then
game:Shutdown()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectMisc == "Revive" then
RemotesFolder.Revive:FireServer()
end
end
end)
end})
Misc:AddToggle("MyToggle",{
Text = "Death",
Default = false,
Callback = function(v)
_G.EnabledOnDeath = v
end})
Misc:AddDivider()
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end 
end)
end)
Misc:AddToggle("MyToggle",{
Text = "Doors Fast",
Default = false,
Callback = function(v)
_G.FastDoors = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.RemoteDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end 
end)
end)
Misc:AddToggle("MyToggle",{
Text = "Doors Reach",
Default = false,
Callback = function(v)
_G.RemoteDoors = v
end})
Misc:AddDivider()
Misc:AddToggle("MyToggle",{
Text = "Through Interact",
Default = false,
Callback = function(v)
_G.ThroughInteract = v
if _G.ThroughInteract then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
ThroughInteract = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
end)
else
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = true
end
end
ThroughInteract:Disconnect()
end
end})
Misc:AddToggle("MyToggle",{
Text = "Reach",
Default = false,
Callback = function(v)
_G.RemoteInteract = v
if _G.RemoteInteract then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = _G.MaxReach or 7.5
end
end
RemoteInteract = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = _G.MaxReach or 7.5
end
end
end)
else
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 7.5
end
end
RemoteInteract:Disconnect()
end
end})
Misc:AddSlider("MySlider",{
Text = "Max Reach",
Min = 7.5,
Default = 7.5,
Max = 15,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.MaxReach = v
end})
local Automation = MainI:AddTab("-Automation-")
Automation:AddToggle("MyToggle",{
Text = "Auto Breaker",
Default = false,
Callback = function(v)
_G.AutoBreaker = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoBreaker then
game:GetService("ReplicatedStorage").RemotesFolder.EBF:FireServer()
end
end)
end})
Automation:AddDivider()
Automation:AddToggle("MyToggle",{
Text = "Auto Padlock Unlock",
Default = false,
Callback = function(v)
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoPadlock then
local Padlock = workspace.CurrentRooms["50"].Door:FindFirstChild("Padlock")
if Padlock then
if (game.Players.LocalPlayer.Character.Collision.Position - Padlock.Main.Position).Magnitude < _G.PadlockDistance then
RemotesFolder.PL:FireServer()
end
end
end
end)
end})
Automation:AddSlider("MySlider",{
Text = "Padlock Distance",
Min = 50,
Default = 50,
Max = 100,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.PadlockDistance = v
end})
Automation:AddDivider()
Automation:AddButton({
Text = "Return to Lobby",
DoubleClick = true,
Func = function(v)
RemotesFolder.Lobby:FireServer()
end})
Automation:AddButton({
Text = "Play Again",
DoubleClick = true,
Func = function(v)
RemotesFolder.PlayAgain:FireServer()
end})
Automation:AddButton({
Text = "Revive",
DoubleClick = true,
Func = function(v)
RemotesFolder.Revive:FireServer()
end})
Automation:AddButton({
Text = "Instance Leave",
DoubleClick = true,
Func = function(v)
game:Shutdown()
end})
local MainII = Tabs.Main:AddRightTabbox()
local World = MainII:AddTab("-World-")
game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
if _G.ClosetsExitFix and game.Players.LocalPlayer.Character:GetAttribute("Hiding")==true then 
game:GetService("ReplicatedStorage").EntityInfo.CamLock:FireServer()
end 
end)
World:AddToggle("MyToggle",{
Text = "Closets Exit Fix",
Default = false,
Callback = function(v)
_G.ClosetsExitFix = v
end})
World:AddToggle("MyToggle",{
Text = "Blur Fake Brigde",
Default = false,
Callback = function(v)
_G.BlurFakeBridge = v
if _G.BlurFakeBridge then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.9
end
end
BlurFakeBridge = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.75
end
end
end)
else
BlurFakeBridge:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0
end
end
end
end})
World:AddDivider()
World:AddToggle("MyToggle",{
Text = "Delete Live Sanity",
Default = false,
Callback = function(v)
_G.NoLiveSanity = v
while _G.NoLiveSanity do wait(1)
for _,v in workspace.CurrentCamera:GetChildren() do
if v.Name == "LiveSanity" and workspace:FindFirstChild("EntityModel") then
v.Enabled = not _G.NoLiveSanity
end
end
end
end})
World:AddToggle("MyToggle",{
Text = "Delete Void Roblox",
Default = false,
Callback = function(v)
if v then
workspace.FallenPartsDestroyHeight = 0 / 0
else
workspace.FallenPartsDestroyHeight = -50000
end
end})
World:AddDivider()
_G.AlertVolume = 5
World:AddToggle("MyToggle",{
Text = "Alert Entity",
Default = false,
Callback = function(v)
if v then
local Entity = {"SeekNewCloneMoving","SeekMoving","BackdoorLookman","BackdoorRush","GloombatSwarm","Eyes","JeffTheKiller","RushMoving","AmbushMoving","Snare","A60","A120"}
NotificationEntity = workspace.ChildAdded:Connect(function(v)
if table.find(Entity,v.Name) then
repeat task.wait() until game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position) < 750 or not v:IsDescendantOf(workspace)
if v:IsDescendantOf(workspace) then
if v.Name == "RushMoving" then
Notification:Notify("Entity 'Rush' has spawn,\nhide in closets now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "AmbushMoving" then
Notification:Notify("Entity 'Ambush' has spawn,\nhide in closets now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "A60" then
Notification:Notify("Entity 'A60' has spawn,\nhide in a locker!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "A120" then
Notification:Notify("Entity 'A120' has spawn,\nhide in a locker!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "JeffTheKiller" then
Notification:Notify("Entity 'JeffTheKiller' has spawn,\ncareful with it!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "Eyes" then
Notification:Notify("Entity 'Eyes' has spawn,\ndont look at it!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "GloombatSwarm" then
Notification:Notify("Entity 'Gloombat Swarm' has spawn,\noff light to survival!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "BackdoorRush" then
Notification:Notify("Entity 'Blitz' has spawn,\nhide in closets now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "BackdoorLookman" then
Notification:Notify("Entity 'Lookman' has spawn,\nlook under side!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "SeekMoving" then
Notification:Notify("Seek Chase,\ngoodluck for you in chase!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif v.Name == "SeekNewCloneMoving" then
Notification:Notify("Seek Chase,\ngoodluck for you in chase!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.AlertVolume
Sound.PlayOnRemove = true
Sound:Destroy()
end
end
end
end
end)
else
NotificationEntity:Disconnect()
end
end})
World:AddToggle("MyToggle",{
Text = "Alert Sound",
Default = false,
Callback = function(v)
_G.SoundAlert = v
end})
World:AddSlider("MySlider",{
Text = "Volume Alert",
Min = 0,
Default = 5,
Max = 10,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.AlertVolume = v
end})
local PlayersI = Tabs.Players:AddLeftTabbox()
local Character = PlayersI:AddTab("-Character-")
Character:AddSlider("MySlider",{
Text = "Speed Boost",
Min = 15,
Default = 15,
Max = 50,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SpeedBoost = v
end})
Character:AddToggle("MyToggle",{
Text = "Speed Boost",
Default = false,
Callback = function(v)
_G.EnabledSpeed = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledSpeed then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.SpeedBoost or 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 1)
else
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 0)
end
end)
end})
Character:AddDivider()
Character:AddToggle("MyToggle",{
Text = "Instance Interact",
Default = false,
Callback = function(v)
_G.InstanceInteract = v
if _G.InstanceInteract then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
InstanceInteract = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
end)
else
InstanceInteract:Disconnect()
end
end})
Character:AddToggle("MyToggle",{
Text = "Eat Candies",
Default = false,
Callback = function(v)
_G.EatCandy = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character:FindFirstChild("Candy",true) and _G.EatCandy then
if not game.Players.LocalPlayer.Character:FindFirstChild("Meshes/DOORS_EvilCandy_Cube", true) then
game.Players.LocalPlayer.Character.Candy.Remote:FireServer()
end
end
end)
end})
Character:AddToggle("MyToggle",{
Text = "No Accessories",
Default = false,
Callback = function(v)
_G.NoSlow = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.Head.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LowerTorso.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.UpperTorso.Massless = not _G.NoSlow;
end)
end})
local LocalPlayer = PlayersI:AddTab("-LocalPlayer-")
LocalPlayer:AddToggle("Noclip",{
Text = "Noclip",
Default = false,
Callback = function(v)
_G.Noclip = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.Collision.CanCollide = not _G.Noclip
game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = not _G.Noclip
end)
end}):AddKeyPicker("Noclip", {
    Default = "N",
    Text = "Noclip",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})
LocalPlayer:AddDivider()
LocalPlayer:AddSlider("Speed Fly", {
    Text = "Speed Fly",
    Default = 16,
    Min = 16,
    Max = 50,
    Rounding = 0,
    Compact = true,
    Callback = function(Value)
_G.SetSpeedFly = Value
end})
_G.SetSpeedFly = 16
LocalPlayer:AddToggle("StFly", {
    Text = "Fly",
    Default = false,
    Callback = function(Value)
_G.StartFly = Value
if _G.StartFly == false then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end
end
while _G.StartFly do
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") == nil and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") == nil then
local bv = Instance.new("BodyVelocity")
local bg = Instance.new("BodyGyro")

bv.Name = "VelocityHandler"
bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bv.MaxForce = Vector3.new(0,0,0)
bv.Velocity = Vector3.new(0,0,0)

bg.Name = "GyroHandler"
bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bg.MaxTorque = Vector3.new(0,0,0)
bg.P = 1000
bg.D = 50
end
task.wait()
end
end}):AddKeyPicker("Fly", {
   Default = "F",
   Text = "Fly",
   Mode = Library.IsMobile and "Toggle" or "Hold",
   SyncToggleState = Library.IsMobile
})
LocalPlayer:AddToggle("MyToggle",{
Text = "Can Jump",
Default = false,
Callback = function(v)
_G.Jump = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character:SetAttribute("CanJump", _G.Jump)
end)
end})
LocalPlayer:AddToggle("MyToggle",{
Text = "Auto Jump",
Default = false,
Callback = function(v)
_G.AutoJump = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoJump then
game.Players.LocalPlayer.Character.Humanoid.Jump = true
end
end)
end})
LocalPlayer:AddButton({
Text = "Reset Character",
DoubleClick = true,
Func = function(v)
game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})
local PlayersII = Tabs.Players:AddRightTabbox()
local Bypass = PlayersII:AddTab("-Bypass-")
Bypass:AddToggle("MyToggle",{
Text = "Speed Bypass",
Default = false,
Callback = function(v)
_G.SpeedBypass = v
local ClonedCollision = game:GetService("Players").LocalPlayer.Character.Collision:Clone()
ClonedCollision.Name = "_CollisionClone"
ClonedCollision.Massless = true
ClonedCollision.Parent = game:GetService("Players").LocalPlayer.Character
ClonedCollision.CanCollide = false
ClonedCollision.CanQuery = false
ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
if ClonedCollision:FindFirstChild("CollisionCrouch") then
ClonedCollision.CollisionCrouch:Destroy()
end
task.spawn(function()
while task.wait(0.23) do
if _G.SpeedBypass then
if ClonedCollision then
ClonedCollision.Massless = false
task.wait(0.23)
if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Anchored then
ClonedCollision.Massless = true
task.wait(1)
end
ClonedCollision.Massless = true
end
end
end
end)
end})
Bypass:AddToggle("MyToggle",{
Text = "Ladder Bypass",
Default = false,
Callback = function(v)
_G.LadderBypass = v
task.spawn(function()
while _G.LadderBypass do wait(1)
if v and not workspace:FindFirstChild("Ladder_Bypass") then
local progressPart = Instance.new("Part", workspace) do
progressPart.Anchored = true
progressPart.CanCollide = false
progressPart.Name = "Ladder_Bypass"
progressPart.Transparency = 1
end
if getgenv().LadderBypass and game.Players.LocalPlayer.Character:GetAttribute("Climbing") then
task.wait(1)
game.Players.LocalPlayer.Character:SetAttribute("Climbing", false)
end
else
if workspace:FindFirstChild("Ladder_Bypass") then 
workspace:FindFirstChild("Ladder_Bypass"):Destroy() 
end
end
end
end)
end})
Bypass:AddToggle("MyToggle",{
Text = "Crouch Spoof Bypass",
Default = false,
Callback = function(v)
_G.CrouchSpoof = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.CrouchSpoof then
game:GetService("ReplicatedStorage").RemotesFolder.Crouch:FireServer(true)
else
game:GetService("ReplicatedStorage").RemotesFolder.Crouch:FireServer(false)
end
end)
end})
Bypass:AddToggle("MyToggle",{
Text = "Manipulate Bypass",
Default = false,
Callback = function(v)
_G.ManipulateBypass = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ManipulateBypass then
game.Players.LocalPlayer.Character:PivotTo(game.Players.LocalPlayer.Character:GetPivot() + workspace.CurrentCamera.CFrame.LookVector * Vector3.new(1, 0, 1) * -100)
end
end)
end}):AddKeyPicker("Noclip", {
    Default = "B",
    Text = "Manipulate Bypass",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})
local ExploitsI = Tabs.Exploits:AddLeftTabbox()
local Anti = ExploitsI:AddTab("-Anti-")
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSnare then
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("Snare") then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "Snare" then 
v.Hitbox.CanTouch = not _G.AntiSnare
end 
end 
end 
end 
end)
Anti:AddToggle("MyToggle",{
Text = "Anti-Snare",
Default = false,
Callback = function(v)
_G.AntiSnare = v
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Dupe",
Default = false,
Callback = function(v)
_G.AntiDupe = v
if _G.AntiDupe then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not _G.AntiDupe
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not true
end
end
end
AntiDupe = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not _G.AntiDupe
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not true
end
end
end
end)
else
AntiDupe:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not false
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not false
end
end
end
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Chandelier",
Default = false,
Callback = function(v)
_G.AntiChandelier = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiChandelier then 
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("ChandelierObstruction") then 
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "ChandelierObstruction" then 
v.HurtPart.CanTouch = not _G.AntiChandelier
end 
end 
end 
end 
end)
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Seek Arms",
Default = false,
Callback = function(v)
_G.AntiSeekArms = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSeekArms then
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("Seek_Arm") then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "Seek_Arm" then 
v.AnimatorPart.CanTouch = not _G.AntiSeekArms
end 
end 
end 
end 
end)
end})
game:GetService("RunService").RenderStepped:Connect(function()
if not (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:FindFirstChild("Collision")) then return end
if workspace:FindFirstChild("Eyes") and _G.AntiEyes then
for _, v in workspace:GetChildren() do
if v.Name == "Eyes" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
RemotesFolder.MotorReplication:FireServer(-650)
break
end
end
end
if workspace:FindFirstChild("BackdoorLookman") and _G.AntiLookman then
for _, v in workspace:GetChildren() do
if v.Name == "BackdoorLookman" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
RemotesFolder.MotorReplication:FireServer(-650)
break
end
end
end
end)
Anti:AddToggle("MyToggle",{
Text = "Anti-Eyes",
Default = false,
Callback = function(v)
_G.AntiEyes = v
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Lookman",
Default = false,
Callback = function(v)
_G.AntiLookman = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.AntiGiggle then
for _, room in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetChildren()) do
if room.Name == "GiggleCeiling" then
room.Hitbox.CanTouch = not _G.AntiGiggle
end
end
end
end)
end)
Anti:AddToggle("MyToggle",{
Text = "Anti-Giggle",
Default = false,
Callback = function(v)
_G.AntiGiggle = v
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Screech",
Default = false,
Callback = function(v)
_G.AntiScreech = v
if _G.AntiScreech then
RemotesFolder.Screech.Name = "_Screech"
else
RemotesFolder._Screech.Name = "Screech"
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-A90",
Default = false,
Callback = function(v)
if v then
RemotesFolder.A90.Name = "_A90"
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_A90").Parent = nil
else
RemotesFolder._A90.Name = "A90"
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_A90").Parent = game.Players.LocalPlayers.PlayerGui.MainUI.Jumpscare
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Halt",
Default = false,
Callback = function(v)
_G.AntiHalt = v
while _G.AntiHalt do wait(0.1)
game:GetService("ReplicatedStorage").ClientModules.EntityModules.Shade.Parent = game.Workspace
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Dread",
Default = false,
Callback = function(v)
if v then
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_Dread").Parent = workspace
RemotesFolder.Dread.Name = "_Dread"
else
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_Dread").Parent = game.Players.LocalPlayers.PlayerGui.MainUI.Jumpscare
RemotesFolder._Dread.Name = "Dread"
end
end})
Anti:AddDivider()
Anti:AddToggle("MyToggle",{
Text = "Anti-Lava",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = false
end
end
AntiLava = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = false
end
end
end)
else
AntiLava:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = true
end
end
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-Seek Wall",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = false
end
end
AntiWall = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = false
end
end
end)
else
AntiWall:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = true
end
end
end
end})
Anti:AddToggle("MyToggle",{
Text = "Anti-DrakoBloxxer",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Drakobloxxer" then
v:Destroy()
end
end
AntiDrakobloxxer = workspace.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Drakobloxxer" then
v:Destroy()
end
end
end)
else
AntiDrakobloxxer:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Drakobloxxer" then
v:Destroy()
end
end
end
end})
local ExploitsII = Tabs.Exploits:AddRightTabbox()
local Troll = ExploitsII:AddTab("-Troll-")
Troll:AddToggle("MyToggle",{
Text = "Waste Spam Items",
Default = false,
Callback = function(v)
_G.WasteItems = v
while task.wait(0.5) do
if not _G.WasteItems then
break
end
for _,Player in pairs(game.Players:GetPlayers()) do
local function WasteItem(Item)
if Item.Parent ~= game.Players.LocalPlayer.Character and Item.Parent.Parent ~= game.Players.LocalPlayer then
if ((Item.Name == "Laser Pointer" or Item.Name == "Bulklight" or Item.Name == "Straplight" or Item.Name == "Moonlight Candle" or Item.Name == "Candle" or Item.Name == "Lighter" or Item.Name == "Flashlight") and Item:GetAttribute("Enabled") == false) or Item.Name == "Vitamins" then
Item.Remote:FireServer()
end
end
end
for _,Item in pairs(Player.Backpack:GetChildren()) do
WasteItem(Item)
end
for _,Item in pairs(Player.Character:GetChildren()) do
WasteItem(Item)
end
end
end
end})
Troll:AddToggle("MyToggle",{
Text = "Lag Move",
Default = false,
Callback = function(v)
_G.LagBody = v
while _G.LagBody and task.wait(0.5) do
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.5)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end
end})
Troll:AddToggle("MyToggle",{
Text = "Spam Motor Replication",
Default = false,
Callback = function(v)
if v then
SpoofMotor = game:GetService("RunService").Heartbeat:Connect(function()
RemotesFolder.MotorReplication:FireServer(math.random(1,100000),math.random(1,100000),math.random(1,100000),false)
end)
else
SpoofMotor:Disconnect()
end
end})
local VisualI = Tabs.Visual:AddLeftTabbox()
local Camera = VisualI:AddTab("-Camera-")
Camera:AddSlider("MySlider", {
    Text = "Field Of View",
    Default = 70,
    Min = 70,
    Max = 120,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
_G.FieldOfView = v
end})
Camera:AddToggle("MyToggle",{
Text = "Field Of View",
Default = false,
Callback = function(v)
_G.Field = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.Field then
workspace.CurrentCamera.FieldOfView = _G.FieldOfView or 70
else
workspace.CurrentCamera.FieldOfView = 70
end
end)
end})
Camera:AddButton({
Text = "No Camera Shake",
DoubleClick = true,
Func = function()
RemotesFolder.CamShake:Destroy()
end})
Camera:AddDivider()
Camera:AddToggle("MyToggle",{
Text = "Delete Darkness Effect",
Default = false,
Callback = function(v)
_G.Fullbright = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.Fullbright then
game.Lighting.Brightness = 0
game.Lighting.GlobalShadows = false
game.Lighting.OutdoorAmbient = Color3.new(1,1,1)
else
game.Lighting.Brightness = 1
game.Lighting.GlobalShadows = true
game.Lighting.OutdoorAmbient = Color3.new(0,0,0)
end
end)
end})
Camera:AddToggle("MyToggle",{
Text = "Delete Thickfog",
Default = false,
Callback = function(v)
pcall(function()
if not game.Lighting:GetAttribute("FogStart") then game.Lighting:SetAttribute("FogStart", game.Lighting.FogStart) end
if not game.Lighting:GetAttribute("FogEnd") then game.Lighting:SetAttribute("FogEnd", game.Lighting.FogEnd) end
game.Lighting.FogStart = v and 0 or game.Lighting:GetAttribute("FogStart")
game.Lighting.FogEnd = v and math.huge or game.Lighting:GetAttribute("FogEnd")
local fog = game.Lighting:FindFirstChildOfClass("Atmosphere")
if fog then
if not fog:GetAttribute("Density") then fog:SetAttribute("Density", fog.Density) end
fog.Density = v and 0 or fog:GetAttribute("Density")
end
end)
end})
local FPS = VisualI:AddTab("-FPS-")
FPS:AddToggle("MyToggle",{
Text = "Unbreaker Light",
Default = false,
Callback = function(v)
if v then
local Module_Events = require(game.ReplicatedStorage.ClientModules.Module_Events)
local ShatterFunction = Module_Events.shatter
Module_Events.shatter = function(v)
table.insert({}, tostring(v))
end
else
Module_Events.shatter = ShatterFunction
end
end})
FPS:AddToggle("MyToggle",{
Text = "Unmessage Death Hint",
Default = false,
Callback = function(v)
_G.RemoveDeathHint = v
RemotesFolder.DeathHint.OnClientEvent:Connect(function()
if _G.RemoveDeathHint then
task.wait(1)
firesignal(RemotesFolder.DeathHint.OnClientEvent,{},"Blue")
end
end)
end})
FPS:AddDivider()
FPS:AddToggle("MyToggle",{
Text = "Low Detail",
Default = false,
Callback = function(v)
if v then
for _, object in pairs(workspace:GetDescendants()) do
if object:IsA("BasePart") then
if not object:GetAttribute("Material") then object:SetAttribute("Material", object.Material) end
if not object:GetAttribute("Reflectance") then object:SetAttribute("Reflectance", object.Reflectance) end
object.Material = true and Enum.Material.Plastic or object:GetAttribute("Material")
object.Reflectance = true and 0 or object:GetAttribute("Reflectance")
elseif object:IsA("Decal") then
if not object:GetAttribute("Transparency") then object:SetAttribute("Transparency", object.Transparency) end
end
end
workspace.Terrain.WaterReflectance = true and 0 or 1
workspace.Terrain.WaterTransparency = true and 0 or 1
workspace.Terrain.WaterWaveSize = true and 0 or 0.05
workspace.Terrain.WaterWaveSpeed = true and 0 or 8
LowQuality = workspace.CurrentRooms.ChildAdded:Connect(function(child)
for _, object in pairs(workspace:GetDescendants()) do
if object:IsA("BasePart") then
if not object:GetAttribute("Material") then object:SetAttribute("Material", object.Material) end
if not object:GetAttribute("Reflectance") then object:SetAttribute("Reflectance", object.Reflectance) end
object.Material = true and Enum.Material.Plastic or object:GetAttribute("Material")
object.Reflectance = true and 0 or object:GetAttribute("Reflectance")
elseif object:IsA("Decal") then
if not object:GetAttribute("Transparency") then object:SetAttribute("Transparency", object.Transparency) end
end
end
workspace.Terrain.WaterReflectance = true and 0 or 1
workspace.Terrain.WaterTransparency = true and 0 or 1
workspace.Terrain.WaterWaveSize = true and 0 or 0.05
workspace.Terrain.WaterWaveSpeed = true and 0 or 8
end)
else
LowQuality:Disconnect()
for _, object in pairs(workspace:GetDescendants()) do
if object:IsA("BasePart") then
if not object:GetAttribute("Material") then object:SetAttribute("Material", object.Material) end
if not object:GetAttribute("Reflectance") then object:SetAttribute("Reflectance", object.Reflectance) end
object.Material = false and Enum.Material.Plastic or object:GetAttribute("Material")
object.Reflectance = false and 0 or object:GetAttribute("Reflectance")
elseif object:IsA("Decal") then
if not object:GetAttribute("Transparency") then object:SetAttribute("Transparency", object.Transparency) end
end
end
workspace.Terrain.WaterReflectance = false and 0 or 1
workspace.Terrain.WaterTransparency = false and 0 or 1
workspace.Terrain.WaterWaveSize = false and 0 or 0.05
workspace.Terrain.WaterWaveSpeed = false and 0 or 8
end
end})
FPS:AddDivider()
FPS:AddToggle("MyToggle",{
Text = "Delete Bat Decorate",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do
if v:IsA("Model") and v.Name == "HangingHalloweenDecor" then
v:Destroy()
end
end
NoBat = workspace.CurrentRooms.ChildAdded:Connect(function(child)
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do
if v:IsA("Model") and v.Name == "HangingHalloweenDecor" then
v:Destroy()
end
end
end)
else
NoBat:Disconnect()
end
end})
local VisualII = Tabs.Visual:AddRightTabbox()
local ESP = VisualII:AddTab("-ESP-")
ESP:AddToggle("MyToggle",{
Text = "Door ESP",
Default = false,
Callback = function(v)
_G.ESPDoor = v
if v then
local function setup(room)
local Door = room:WaitForChild("Door"):WaitForChild("Door")
task.wait(0.1)
local DoorESP = LibraryESP:AddESP(Door, "Door", _G.DoorColorESP or Color3.fromRGB(0, 255, 0), 25, "DoorESP")
table.insert({},DoorESP)
Door:WaitForChild("Open").Played:Connect(function()
DoorESP:Destroy()
end)
Door.AncestryChanged:Connect(function()
DoorESP:Destroy()
end)
end
DoorINF = workspace.CurrentRooms.ChildAdded:Connect(function(room)
setup(room)
end)
for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
if room:FindFirstChild("Assets") then
setup(room) 
end
end
repeat task.wait() until not _G.ESPDoor
DoorINF:Disconnect()
LibraryESP:Delete("DoorESP")
end
end})
ESP:AddToggle("MyToggle",{
Text = "Key ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "KeyObtain" then
LibraryESP:AddESP(v,"Key",_G.KeyColorESP or Color3.fromRGB(255, 255, 100),25,"KeyESP")
end		
end					                
KeyESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "KeyObtain" then
LibraryESP:AddESP(v,"Key",_G.KeyColorESP or Color3.fromRGB(255, 255, 100),25,"KeyESP")
end		
end	
end)
else
KeyESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "KeyESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Lever ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LeverForGate" then
LibraryESP:AddESP(v,"Lever Gate",_G.LeverColorESP or Color3.fromRGB(100, 100, 100),25,"LeverGateESP")
elseif v.Name == "LeverForGate" then
LibraryESP:AddESP(v,"Timer Lever",_G.LeverColorESP or Color3.fromRGB(100, 100, 100),25,"LeverGateESP")
end		
end					                
LeverGateESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LeverForGate" then
LibraryESP:AddESP(v,"Lever Gate",_G.LeverColorESP or Color3.fromRGB(100, 100, 100),25,"LeverGateESP")
elseif v.Name == "LeverForGate" then
LibraryESP:AddESP(v,"Timer Lever",_G.LeverColorESP or Color3.fromRGB(100, 100, 100),25,"LeverGateESP")
end		
end	
end)
else
LeverGateESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "LeverGateESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Books ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveHintBook" then
LibraryESP:AddESP(v,"Book",_G.BookColorESP or Color3.fromRGB(255, 100, 255),25,"BookESP")
end		
end					                
BookESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveHintBook" then
LibraryESP:AddESP(v,"Book",_G.BookColorESP or Color3.fromRGB(255, 100, 255),25,"BookESP")
end		
end			
end)
else
BookESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "BookESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Lever ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveBreakerPolePickup" then
LibraryESP:AddESP(v,"Breaker",_G.BreakerColorESP or Color3.fromRGB(100, 100, 100),25,"BreakerESP")
end		
end					                
BreakerESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveBreakerPolePickup" then
LibraryESP:AddESP(v,"Breaker",_G.BreakerColorESP or Color3.fromRGB(100, 100, 100),25,"BreakerESP")
end		
end					
end)
else
BreakerESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "BreakerESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Generator ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesGenerator" then
LibraryESP:AddESP(v,"Generator",_G.GeneratorColorESP or Color3.fromRGB(0, 255, 0),25,"GeneratorESP")
end		
end					                
GeneratorESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesGenerator" then
LibraryESP:AddESP(v,"Generator",_G.GeneratorColorESP or Color3.fromRGB(0, 255, 0),25,"GeneratorESP")
end		
end	
end)
else
GeneratorESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "GeneratorESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Dupe ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" then
LibraryESP:AddESP(v,"Dupe",_G.DupeColorESP or Color3.fromRGB(255, 0, 0),25,"DupeESP")
end		
end					                
DupeESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" then
LibraryESP:AddESP(v,"Dupe",_G.DupeColorESP or Color3.fromRGB(255, 0, 0),25,"DupeESP")
end		
end			
end)
else
DupeESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "DupeESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Anchor ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesAnchor" then
LibraryESP:AddESP(v,"Anchor",_G.AnchorColorESP or Color3.fromRGB(255, 255, 255),25,"AnchorESP")
end		
end					                
AnchorESP = workspace.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesAnchor" then
LibraryESP:AddESP(v,"Anchor",_G.AnchorColorESP or Color3.fromRGB(255, 255, 255),25,"AnchorESP")
end		
end		
end)
else
AnchorESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "AnchorESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Water Pump ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "WaterPump" then
LibraryESP:AddESP(v,"Water Pump",_G.WaterPumpColorESP or Color3.fromRGB(255, 0, 255),25,"PumpESP")
end		
end					                
PumpESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "WaterPump" then
LibraryESP:AddESP(v,"Water Pump",_G.WaterPumpColorESP or Color3.fromRGB(255, 0, 255),25,"PumpESP")
end		
end		
end)
else
PumpESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "PumpESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Lockers ESP (The Rooms)",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Rooms_Locker" then
LibraryESP:AddESP(v,"Locker",_G.RoomLockerColorESP or Color3.fromRGB(0, 255, 0),25,"LockerESP")
elseif v.Name == "Rooms_Locker_Fridge" then
LibraryESP:AddESP(v,"Locker Fridge",_G.RoomLockerColorESP or Color3.fromRGB(0, 255, 0),25,"LockerESP")
end		
end					                
LockerESP = workspace.CurrentRooms.ChildAdded:Connect(function(child)                       
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Rooms_Locker" then
LibraryESP:AddESP(v,"Locker",_G.RoomLockerColorESP or Color3.fromRGB(0, 250, 0),25,"LockerESP")
elseif v.Name == "Rooms_Locker_Fridge" then
LibraryESP:AddESP(v,"Locker Fridge",_G.RoomLockerColorESP or Color3.fromRGB(0, 255, 0),25,"LockerESP")
end		
end			
end)
else
LockerESP:Disconnect()
for _, v in pairs(workspace:GetDescendants()) do
if v.Name == "LockerESP" then
v:Destroy()
end
end
end
end})
ESP:AddToggle("MyToggle",{
Text = "Items ESP",
Default = false,
Callback = function(v)
_G.ItemESP = v
if v then
local function check(v)
if v:IsA("Model") and (v:GetAttribute("Pickup") or v:GetAttribute("PropType")) then
local part = (v:FindFirstChild("Handle") or v:FindFirstChild("Prop"))
local Items = LibraryESP:AddESP(v,v.Name,_G.ItemsColorESP or Color3.fromRGB(0,255,0),25,"ItemESP")
table.insert({},Items)
end
end    
local function setup(room)
local assets = room:WaitForChild("Assets")     
if assets then  
ItemESP = assets.DescendantAdded:Connect(function(v)
check(v) 
end)            
for i,v in pairs(assets:GetDescendants()) do
check(v)
end    
task.spawn(function()
repeat task.wait() until not _G.ItemESP
subaddcon:Disconnect()  
end) 
end 
end
ItemESP = workspace.CurrentRooms.ChildAdded:Connect(function(room)
setup(room)
end)     
for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
if room:FindFirstChild("Assets") then
setup(room) 
end
end
repeat task.wait() until not _G.ItemESP
ItemESP:Disconnect()     
LibraryESP:Delete("ItemESP")
end
end})
ESP:AddToggle("MyToggle",{
Text = "Gold ESP",
Default = false,
Callback = function(v)
_G.GoldESP = v
if v then
local function check(v)
if v:IsA("Model") and v.Name == "GoldPile" then
task.wait(0.1)
local Hitbox = v:WaitForChild("Hitbox")
local DoorESP = LibraryESP:AddESP(v,"Gold (".. tostring(v:GetAttribute("GoldValue")).."$)",_G.GoldColorESP or Color3.fromRGB(255,255,0),25,"GoldESP")
table.insert({},DoorESP)
end
end
local function setup(room)
local assets = room:WaitForChild("Assets")
GoldESP = assets.DescendantAdded:Connect(function(v)
check(v) 
end)
for i,v in pairs(assets:GetDescendants()) do
check(v)
end         
task.spawn(function()
repeat task.wait() until not _G.GoldESP
GoldESP:Disconnect()  
end)  
end       
GoldESP = workspace.CurrentRooms.ChildAdded:Connect(function(room)
setup(room)
end)
for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
if room:FindFirstChild("Assets") then
setup(room) 
end
end       
repeat task.wait() until not _G.GoldESP
GoldESP:Disconnect()
LibraryESP:Delete("GoldESP")
end
end})
ESP:AddToggle("MyToggle",{
Text = "Entity ESP",
Default = false,
Callback = function(v)
if v then               
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "RushMoving" then
LibraryESP:AddESP(v,"Rush",Color3.fromRGB(100, 100, 100),25,"RushESP")
v.RushNew.Transparency = 0
elseif v.Name == "AmbushMoving" then
LibraryESP:AddESP(v,"Ambush",Color3.fromRGB(0, 255, 0),25,"AmbushESP")
v.RushNew.Transparency = 0
elseif v.Name == "JeffTheKiller" then
LibraryESP:AddESP(v,"Jeff",Color3.fromRGB(255, 255, 255),25,"JeffESP")
elseif v.Name == "Eyes" then
LibraryESP:AddESP(v,"Eyes",Color3.fromRGB(0, 0, 255),25,"EyesESP")
elseif v.Name == "BackdoorRush" then
LibraryESP:AddESP(v,"Blitz",Color3.fromRGB(255, 0, 0),25,"BlitzESP")
v.Main.Transparency = 0
elseif v.Name == "BackdoorLookman" then
LibraryESP:AddESP(v,"Lookman",Color3.fromRGB(150, 0, 0),25,"LookmanESP")
elseif v.Name == "FigureRig" then
LibraryESP:AddESP(v,"Figure",Color3.fromRGB(255, 0, 0),25,"FigureESP")
elseif v.Name == "FigureRagdoll" then
LibraryESP:AddESP(v,"Figure",Color3.fromRGB(255, 0, 0),25,"FigureESP")
elseif v.Name == "GiggleCeiling" then
LibraryESP:AddESP(v,"Giggle",Color3.fromRGB(255, 255, 255),25,"GiggleESP")
elseif v.Name == "Grumbo" then
LibraryESP:AddESP(v,"Grumble",Color3.fromRGB(255, 255, 255),25,"GrumbleESP")
elseif v.Name == "A60" then
LibraryESP:AddESP(v,"A60",Color3.fromRGB(255, 0, 0),25,"A60ESP")
v.Main.Transparency = 0
elseif v.Name == "A120" then
LibraryESP:AddESP(v,"A120",Color3.fromRGB(255, 255, 255),25,"A120ESP")
v.Main.Transparency = 0
elseif v.Name == "Dread" then
LibraryESP:AddESP(v,"Dread",Color3.fromRGB(0, 255, 255),25,"DreadESP")
v.Main.Transparency = 0
elseif v.Name == "Drakobloxxer" then
LibraryESP:AddESP(v,"Drakobloxxer",Color3.fromRGB(255, 0, 0),25,"DrakoESP")
end		
end					                
EntityESP = workspace.ChildAdded:Connect(function(v)    
repeat task.wait() until game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position) < 750 or not v:IsDescendantOf(workspace)
if v:IsDescendantOf(workspace) then
if v.Name == "RushMoving" then
LibraryESP:AddESP(v,"Rush",Color3.fromRGB(100, 100, 100),25,"RushESP")
v.RushNew.Transparency = 0
elseif v.Name == "AmbushMoving" then
LibraryESP:AddESP(v,"Ambush",Color3.fromRGB(0, 255, 0),25,"AmbushESP")
v.RushNew.Transparency = 0
elseif v.Name == "JeffTheKiller" then
LibraryESP:AddESP(v,"Jeff",Color3.fromRGB(255, 255, 255),25,"JeffESP")
elseif v.Name == "Eyes" then
LibraryESP:AddESP(v,"Eyes",Color3.fromRGB(0, 0, 255),25,"EyesESP")
v.Core.Transparency = 0
elseif v.Name == "BackdoorRush" then
LibraryESP:AddESP(v,"Blitz",Color3.fromRGB(255, 0, 0),25,"BlitzESP")
v.Main.Transparency = 0
elseif v.Name == "BackdoorLookman" then
LibraryESP:AddESP(v,"Lookman",Color3.fromRGB(150, 0, 0),25,"LookmanESP")
v.Core.Transparency = 0
elseif v.Name == "A60" then
LibraryESP:AddESP(v,"A60",Color3.fromRGB(255, 0, 0),25,"A60ESP")
v.Main.Transparency = 0
elseif v.Name == "A120" then
LibraryESP:AddESP(v,"A120",Color3.fromRGB(255, 255, 255),25,"A120ESP")
v.Main.Transparency = 0
elseif v.Name == "Dread" then
LibraryESP:AddESP(v,"Dread",Color3.fromRGB(0, 255, 255),25,"DreadESP")
v.Main.Transparency = 0
elseif v.Name == "Drakobloxxer" then
LibraryESP:AddESP(v,"Drakobloxxer",Color3.fromRGB(255, 0, 0),25,"DrakoESP")
end		
end						
end)
EntityESP = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "FigureRig" then
LibraryESP:AddESP(v,"Figure",Color3.fromRGB(255, 0, 0),25,"FigureESP")
elseif v.Name == "FigureRagdoll" then
LibraryESP:AddESP(v,"Figure",Color3.fromRGB(255, 0, 0),25,"FigureESP")
elseif v.Name == "GiggleCeiling" then
LibraryESP:AddESP(v,"Giggle",Color3.fromRGB(255, 255, 255),25,"GiggleESP")
elseif v.Name == "Grumbo" then
LibraryESP:AddESP(v,"Grumble",Color3.fromRGB(255, 255, 255),25,"GrumbleESP")
end
end
end)
else
EntityESP:Disconnect()
LibraryESP:Delete("RushESP")
LibraryESP:Delete("AmbushESP")
LibraryESP:Delete("EyesESP")
LibraryESP:Delete("BlitzESP")
LibraryESP:Delete("LookmanESP")
LibraryESP:Delete("FigureESP")
LibraryESP:Delete("GiggleESP")
LibraryESP:Delete("GrumbleESP")
LibraryESP:Delete("A60ESP")
LibraryESP:Delete("A120ESP")
LibraryESP:Delete("DreadESP")
LibraryESP:Delete("JeffESP")
LibraryESP:Delete("DrakoESP")
end
end})
local ESPColor = VisualII:AddTab("-Color-")
ESPColor:AddLabel("Door ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(0, 255, 0),
	Title = 'Door ESP',
	Transparency = 0,
	Callback = function(v)
_G.DoorColorESP = v
end})
ESPColor:AddLabel("Key ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 255, 100),
	Title = 'Key ESP',
	Transparency = 0,
	Callback = function(v)
_G.KeyColorESP = v
end})
ESPColor:AddLabel("Lever ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(100, 100, 100),
	Title = 'Lever ESP',
	Transparency = 0,
	Callback = function(v)
_G.LeverColorESP = v
end})
ESPColor:AddLabel("Book ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 100, 255),
	Title = 'Book ESP',
	Transparency = 0,
	Callback = function(v)
_G.BookColorESP = v
end})
ESPColor:AddLabel("Breaker ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(100, 100, 100),
	Title = 'Breaker ESP',
	Transparency = 0,
	Callback = function(v)
_G.BreakerColorESP = v
end})
ESPColor:AddLabel("Generator ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(0, 255, 0),
	Title = 'Generator ESP',
	Transparency = 0,
	Callback = function(v)
_G.GeneratorColorESP = v
end})
ESPColor:AddLabel("Dupe ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 0, 0),
	Title = 'Dupe ESP',
	Transparency = 0,
	Callback = function(v)
_G.DupeColorESP = v
end})
ESPColor:AddLabel("Anchor ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 255, 255),
	Title = 'Anchor ESP',
	Transparency = 0,
	Callback = function(v)
_G.AnchorColorESP = v
end})
ESPColor:AddLabel("Water Pump ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 0, 255),
	Title = 'WaterPump ESP',
	Transparency = 0,
	Callback = function(v)
_G.WaterPumpColorESP = v
end})
ESPColor:AddLabel("Rooms Locker ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(0, 255, 0),
	Title = 'Rooms Locker ESP',
	Transparency = 0,
	Callback = function(v)
_G.RoomLockerColorESP = v
end})
ESPColor:AddLabel("Items ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(0, 255, 0),
	Title = 'Items ESP',
	Transparency = 0,
	Callback = function(v)
_G.ItemsColorESP = v
end})
ESPColor:AddLabel("Gold ESP"):AddColorPicker('ColorPicker',{
	Default = Color3.fromRGB(255, 255, 0),
	Title = 'Gold ESP',
	Transparency = 0,
	Callback = function(v)
_G.GoldColorESP = v
end})
local ESPSetting = VisualII:AddTab("-ESP Setting-")
ESPSetting:AddToggle("MyToggle",{
Text = "Rainbow ESP",
Default = false,
Callback = function(v)
getgenv().RainbowESP = v
Toggles.BHE:SetValue(false)
end})
ESPSetting:AddToggle("MyToggle",{
Text = "Distance ESP",
Default = false,
Callback = function(v)
getgenv().DistanceESP = v
end})
ESPSetting:AddDivider()
ESPSetting:AddDropdown("MyDropdown",{
	Values = {"Guiding","Curious","Modifier"},
	Default = "", 
	Multi = false,
	Text = 'Select Highlight Builder',
	Callback = function(v)
_G.BuilderHigh = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.BuilderHigh == "Guiding" then
Toggles.RainbowESP:SetValue(false)
getgenv().GuidingESP = _G.BuiderHighE
elseif _G.BuilderHigh == "Curious" then
Toggles.RainbowESP:SetValue(false)
getgenv().CuriousESP = _G.BuiderHighE
elseif _G.BuilderHigh == "Guiding" then
Toggles.RainbowESP:SetValue(false)
getgenv().ModifierESP = _G.BuiderHighE
end
end)
end})
ESPSetting:AddToggle("BHE",{
Text = "Builder ESP",
Default = false,
Callback = function(v)
_G.BuilderHighE = v
end})
